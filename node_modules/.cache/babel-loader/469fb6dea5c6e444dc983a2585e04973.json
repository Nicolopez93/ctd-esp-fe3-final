{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Desktop\\\\fe3-final\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useReducer, useContext, useMemo, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  theme: \"light\",\n  data: []\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nconst SET_THEME = \"SET_THEME\";\nconst SET_DATA_API = \"SET_DATA_API \";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case SET_THEME:\n      return { ...state,\n        theme: action.payload\n      };\n\n    case SET_DATA_API:\n      return { ...state,\n        data: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\n        const data = await response.json();\n        dispatch({\n          type: 'SET_API_DATA',\n          payload: data\n        });\n      } catch (error) {\n        console.error('Error fetching API data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n  const contextValue = useMemo(() => ({\n    theme: state.theme,\n    data: state.data,\n    setTheme: theme => dispatch({\n      type: SET_THEME,\n      payload: theme\n    })\n  }), [state.theme, state.data]);\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"1hLxNn5oipVjGNThoOX55kaYYoY=\");\n\n_c = ContextProvider;\nexport const useContextGlobal = () => {\n  _s2();\n\n  return useContext(ContextGlobal);\n};\n\n_s2(useContextGlobal, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useContext","useMemo","useEffect","initialState","theme","data","ContextGlobal","SET_THEME","SET_DATA_API","reducer","state","action","type","payload","ContextProvider","children","dispatch","fetchData","response","fetch","json","error","console","contextValue","setTheme","useContextGlobal"],"sources":["C:/Users/Usuario/Desktop/fe3-final/src/Components/utils/global.context.jsx"],"sourcesContent":["import React, { createContext, useReducer, useContext, useMemo, useEffect } from 'react';\r\n\r\nexport const initialState = { theme: \"light\", data: [] };\r\n\r\nexport const ContextGlobal = createContext(initialState);\r\n\r\nconst SET_THEME = \"SET_THEME\";\r\nconst SET_DATA_API = \"SET_DATA_API \";\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case SET_THEME:\r\n        return { ...state, theme: action.payload };\r\n      case SET_DATA_API:\r\n        return { ...state, data: action.payload };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\nexport const ContextProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`https://jsonplaceholder.typicode.com/users`);\r\n        const data = await response.json();\r\n        dispatch({ type: 'SET_API_DATA', payload: data });\r\n      } catch (error) {\r\n        console.error('Error fetching API data:', error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const contextValue = useMemo(() => ({\r\n    theme: state.theme,\r\n    data: state.data,\r\n    setTheme: (theme) => dispatch({ type: SET_THEME, payload: theme }),\r\n  }), [state.theme, state.data]);\r\n\r\n  return (\r\n    <ContextGlobal.Provider value={contextValue}>\r\n      {children}\r\n    </ContextGlobal.Provider>\r\n  );\r\n};\r\n\r\nexport const useContextGlobal = () => useContext(ContextGlobal);\r\n\r\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,OAAvD,EAAgEC,SAAhE,QAAiF,OAAjF;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,OAAT;EAAkBC,IAAI,EAAE;AAAxB,CAArB;AAEP,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAACK,YAAD,CAAnC;AAEP,MAAMI,SAAS,GAAG,WAAlB;AACA,MAAMC,YAAY,GAAG,eAArB;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC/B,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKL,SAAL;MACE,OAAO,EAAE,GAAGG,KAAL;QAAYN,KAAK,EAAEO,MAAM,CAACE;MAA1B,CAAP;;IACF,KAAKL,YAAL;MACE,OAAO,EAAE,GAAGE,KAAL;QAAYL,IAAI,EAAEM,MAAM,CAACE;MAAzB,CAAP;;IACF;MACE,OAAOH,KAAP;EANJ;AAQD,CATH;;AAWA,OAAO,MAAMI,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC/C,MAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBjB,UAAU,CAACU,OAAD,EAAUN,YAAV,CAApC;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,YAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAAF,CAA5B;QACA,MAAMd,IAAI,GAAG,MAAMa,QAAQ,CAACE,IAAT,EAAnB;QACAJ,QAAQ,CAAC;UAAEJ,IAAI,EAAE,cAAR;UAAwBC,OAAO,EAAER;QAAjC,CAAD,CAAR;MACD,CAJD,CAIE,OAAOgB,KAAP,EAAc;QACdC,OAAO,CAACD,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;MACD;IACF,CARD;;IASAJ,SAAS;EACV,CAXQ,EAWN,EAXM,CAAT;EAaA,MAAMM,YAAY,GAAGtB,OAAO,CAAC,OAAO;IAClCG,KAAK,EAAEM,KAAK,CAACN,KADqB;IAElCC,IAAI,EAAEK,KAAK,CAACL,IAFsB;IAGlCmB,QAAQ,EAAGpB,KAAD,IAAWY,QAAQ,CAAC;MAAEJ,IAAI,EAAEL,SAAR;MAAmBM,OAAO,EAAET;IAA5B,CAAD;EAHK,CAAP,CAAD,EAIxB,CAACM,KAAK,CAACN,KAAP,EAAcM,KAAK,CAACL,IAApB,CAJwB,CAA5B;EAMA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEkB,YAA/B;IAAA,UACGR;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CA3BM;;GAAMD,e;;KAAAA,e;AA6Bb,OAAO,MAAMW,gBAAgB,GAAG;EAAA;;EAAA,OAAMzB,UAAU,CAACM,aAAD,CAAhB;AAAA,CAAzB;;IAAMmB,gB"},"metadata":{},"sourceType":"module"}